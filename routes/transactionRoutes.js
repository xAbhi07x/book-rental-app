const express = require('express');
const router = express.Router();
const Transaction = require('../model/Transaction');
const Book = require('../model/Book');
const User = require('../model/User');

// Issue a book
router.post('/issue', async (req, res) => {
    const { bookName, userId, issueDate } = req.body;
    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ message: 'User not found' });

        const transaction = new Transaction({
            bookId: book._id,
            userId: user._id,
            issueDate,
            status: 'issued'
        });

        await transaction.save();
        res.render('transactions', {
            transactionResponse: { message: 'Book issued successfully', transaction },
            historyResponse: null,
            totalRentResponse: null,
            issuedBooksResponse: null,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Return a book and calculate rent
router.post('/return', async (req, res) => {
    const { bookName, userId, returnDate } = req.body;
    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const transaction = await Transaction.findOne({
            bookId: book._id,
            userId,
            status: 'issued'
        });
        if (!transaction) return res.status(404).json({ message: 'Transaction not found' });

        const issueDate = new Date(transaction.issueDate);
        const returnDateObj = new Date(returnDate);
        const daysRented = Math.ceil((returnDateObj - issueDate) / (1000 * 60 * 60 * 24));
        const rentGenerated = daysRented * book.rentPerDay;

        transaction.returnDate = returnDate;
        transaction.status = 'returned';
        transaction.rentGenerated = rentGenerated;

        await transaction.save();
        res.render('transactions', {
            transactionResponse: { message: 'Book returned successfully', rentGenerated },
            historyResponse: null,
            totalRentResponse: null,
            issuedBooksResponse: null,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get book history (who issued it, who has it now)
router.get('/book-history', async (req, res) => {
    const { bookName } = req.query;
    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const issuedTransactions = await Transaction.find({ bookId: book._id }).populate('userId');
        const currentlyIssued = issuedTransactions.find(t => t.status === 'issued');
        const allIssued = issuedTransactions.length;

        res.render('transactions', {
            transactionResponse: null,
            historyResponse: {
                totalCount: allIssued,
                currentlyIssued: currentlyIssued ? currentlyIssued.userId : 'Not issued currently'
            },
            totalRentResponse: null,
            issuedBooksResponse: null,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get total rent generated by a book
router.get('/book-rent', async (req, res) => {
    const { bookName } = req.query;
    try {
        const book = await Book.findOne({ bookName });
        if (!book) return res.status(404).json({ message: 'Book not found' });

        const transactions = await Transaction.find({ bookId: book._id });
        const totalRent = transactions.reduce((sum, trans) => sum + (trans.rentGenerated || 0), 0);

        res.render('transactions', {
            transactionResponse: null,
            historyResponse: null,
            totalRentResponse: { totalRent },
            issuedBooksResponse: null,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get books issued to a user
router.get('/user-books', async (req, res) => {
    const { userId } = req.query;
    try {
        const transactions = await Transaction.find({ userId, status: 'issued' }).populate('bookId');
        const books = transactions.map(t => t.bookId.bookName);

        res.render('transactions', {
            transactionResponse: null,
            historyResponse: null,
            totalRentResponse: null,
            issuedBooksResponse: books,
        });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

module.exports = router;
